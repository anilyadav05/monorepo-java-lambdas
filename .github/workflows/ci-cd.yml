name: Build and Deploy AWS Lambdas

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-west-2

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17 (Corretto)
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: gradle

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Grant execute permissions to Gradle wrapper
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew shadowJar

      - name: Check `metadata.json`
        run: cat metadata.json

      - name: Deploy to AWS Lambda
        run: |
          if [ ! -f metadata.json ]; then
              echo "❌ Error: metadata.json not found!"
              exit 1
          fi

          for lambda in $(jq -r '.lambdas[].name' metadata.json); do
              echo "🚀 Deploying $lambda..."

              path=$(jq -r --arg lambda "$lambda" '.lambdas[] | select(.name==$lambda) | .path' metadata.json)
              handler=$(jq -r --arg lambda "$lambda" '.lambdas[] | select(.name==$lambda) | .handler' metadata.json)

              if [ ! -f "$path" ]; then
                  echo "❌ Error: Lambda JAR not found at $path"
                  exit 1
              fi

              # Check if the Lambda function exists in AWS
              EXISTS=$(aws lambda get-function --function-name "$lambda" --region "$AWS_REGION" 2>&1 || true)

              if [[ "$EXISTS" == *"ResourceNotFoundException"* ]]; then
                  echo "🚀 Creating new Lambda function: $lambda with handler $handler"

                  aws lambda create-function \
                      --function-name "$lambda" \
                      --runtime java17 \
                      --role arn:aws:iam::741448945841:role/lambda-execution-role \ 
                      --handler "$handler" \
                      --zip-file fileb://$path \
                      --region "$AWS_REGION"
              else
                  echo "🔄 Updating existing Lambda function: $lambda"
          
                  aws lambda update-function-code \
                      --function-name "$lambda" \
                      --zip-file fileb://$path \
                      --region "$AWS_REGION"
              fi
          done
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-west-2
